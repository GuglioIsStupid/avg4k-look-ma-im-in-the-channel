(Made for Avg4K b11.2.3)

To create a modchart, go into a chart and add a folder called "mod". 

Create a file called "mod.lua" and paste in this template:

"

function create()

end

function update()

end

"

Not going to teach you how to use lua but if you already know the stuff you can do is pretty simple.


Global stuff

config.downscroll and config.noteSize exist. Pretty simple, and you can use these anywhere.

theres also gameplay.playField, which is the sprite to the original playfield. All sprite functions affect this as well, go further down to see them.

there are also, gameplay.col1->gameplay.col4, which are the sprites drawing each column. Again all of these are affected by sprite functions.

(function)

activateMod(modName,beat,beatLength,easingType,amount)

For column specific mods use

(function)

activateModMap(modName,beat,beatLength,easingType,amount, col)

Current list of mods:

Non-Column Specific

drunk - https://craftedcart.gitlab.io/notitg_docs/modifiers.html#mod-drunk
wave - https://craftedcart.gitlab.io/notitg_docs/modifiers.html#mod-wave
tipsy - https://craftedcart.gitlab.io/notitg_docs/modifiers.html#mod-tipsy
dizzy - https://craftedcart.gitlab.io/notitg_docs/modifiers.html#mod-tipsy
amovex - https://craftedcart.gitlab.io/notitg_docs/modifiers.html#mod-movex
amovey - https://craftedcart.gitlab.io/notitg_docs/modifiers.html#mod-movey

Column Specific

stealthWhite - https://craftedcart.gitlab.io/notitg_docs/modifiers.html#mod-stealth
stealthReceptorOpacity ^
stealthOpacity ^
reverse - https://craftedcart.gitlab.io/notitg_docs/modifiers.html#mod-reverse
confusion - https://craftedcart.gitlab.io/notitg_docs/modifiers.html#mod-confusion
movex - column specific for amovex
movey - column specific for amovey
drunkCol - column specific for drunk
waveCol - column specific for wave
tipsyCol - column specific for tipsy

Misc Mods

showPath - Shows the arrow path (1 for active, 0 for not)
pathAlpha - The alpha for the arrow path (0 by default)
pathDensity - Since i'm bad at coding, you can change the density. :)

! notice !

all assets are loaded from the "assets/charts/packName/chartName/mod/" directory, obviously with 'packName' = ur pack and 'chartName' = ur chart.

Misc Functions

setNoteskin(noteSkinName) - Sets the current noteskin to assets/charts/packName/chartName/mod/noteSkinName/

Sprite Functions

createSprite(textureName,name,x,y) - Creates a sprite at x,y with assets/charts/packName/chartName/mod/textureName.png

setSpriteProperty(sprite, property, value) - Properties include:
sparrow (a sparrow atlas, ex: "bruh.xml")
loop (loop a sparrow atlas or not, ex "true" or "false)
fps (fps in a sparrow atlas, ex: "24")
anim (set the current animation)
animFinish (what function to call if the animation is not looping and it has finished)
anchor (anchor a sprite to another sprite (value), and the anchored sprite will use the value sprite as its default x and y)

setSpriteOffset(sprite, x, y) - Sets a sprite x and y offsets (from their defaultX/defaultY, works with mods)

copyPlayField(sprite) - Creates a sprite which draws the playfield, all sprite functions work on this. It will reflect everything on the original playfield as well!

activateSpriteMod(sprite, name, tweenStart, tweenLen, easing, amount) - Same as activateMod, but with less mods. Those are:
movex
movey
confusion
defPosX - moveX but with the default X
defPosY - moveY but with the default Y
stealth

Shaders (and functions stuff)

createShader(name, vertFile, fragFile) (end in .shad)

You can put "NULL" in one of them to get the default shader, you probably want the default for the vert but you do you.

Defualts:

Vert:
"
// if you've never fucked with shaders, make sure all of the variables here stay here.
// very important.

in vec2 v_position;
in vec2 v_uv;
in vec4 v_colour;
out vec2 f_uv;
out vec4 f_colour;
uniform mat4 u_projection;

void main()
{
	f_uv = v_uv;
	f_colour = v_colour;
	gl_Position = u_projection * vec4(v_position.xy, 0.0, 1.0);
}
"

Frag:
"
uniform sampler2D u_texture;
uniform float white;
in vec2 f_uv;
in vec4 f_colour;

out vec4 o_colour;
void main()
{
	o_colour = texture(u_texture, f_uv) * f_colour;
	if (o_colour.a == 0.0)
		discard;
	if (white >= 0.9)
		o_colour = vec4(1,1,1,o_colour.a);
		
}
"

Yes, instead of using gl_FragColor we use o_colour. Keep that in mind.

You also have access to iBeat and iTime which is the current charts beat and time respectively.

applyShader(shader, sprite) - Applies the inputed shader to the sprite (overrides if one is already set)